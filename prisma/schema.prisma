generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -----------------------------
// NextAuth-required models
// -----------------------------

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@map("verification_tokens")
}

// -----------------------------
// Your app-specific models
// -----------------------------

model User {
  id            String   @id @default(cuid())
  githubId      String   @unique
  email         String?
  name          String?
  avatar        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // NextAuth relations
  accounts      Account[]
  sessions      Session[]

  // App-specific relations
  repositories  Repository[]
  analyses      Analysis[]

  @@map("users")
}

model Repository {
  id              String   @id @default(cuid())
  githubId        String   @unique
  name            String
  fullName        String
  description     String?
  language        String?
  stars           Int      @default(0)
  forks           Int      @default(0)
  isPrivate       Boolean  @default(false)
  lastAnalyzedAt  DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses        Analysis[]
  commits         Commit[]
  contributors    Contributor[]

  @@map("repositories")
}

model Analysis {
  id              String   @id @default(cuid())
  status          AnalysisStatus @default(PENDING)
  progress        Int      @default(0)
  error           String?
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  commits         Commit[]
  contributors    Contributor[]

  @@map("analyses")
}

model Commit {
  id              String   @id @default(cuid())
  sha             String   @unique
  message         String
  authorName      String
  authorEmail     String
  authorDate      DateTime
  committerName   String
  committerEmail  String
  committerDate   DateTime
  additions       Int      @default(0)
  deletions       Int      @default(0)
  filesChanged    Int      @default(0)
  significance    Float    @default(0)
  summary         String?
  isKeyCommit     Boolean  @default(false)
  createdAt       DateTime @default(now())

  repositoryId    String
  repository      Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  analysisId      String?
  analysis        Analysis? @relation(fields: [analysisId], references: [id])

  @@map("commits")
}

model Contributor {
  id                 String   @id @default(cuid())
  githubId           String
  login              String
  name               String?
  email              String?
  avatar             String?
  commitsCount       Int      @default(0)
  additions          Int      @default(0)
  deletions          Int      @default(0)
  isFirstContributor Boolean  @default(false)
  isTopContributor   Boolean  @default(false)
  createdAt          DateTime @default(now())

  repositoryId       String
  repository         Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  analysisId         String?
  analysis           Analysis? @relation(fields: [analysisId], references: [id])

  @@unique([repositoryId, githubId])
  @@map("contributors")
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
